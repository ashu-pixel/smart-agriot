<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <link rel="stylesheet" href="leaflet.css">
    <link rel="stylesheet" href="qgis2web.css">
    <link rel="stylesheet" href="fontawesome-all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="default.css">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <style>
        #map {
            width: 90%;
            height: 85vh;
        }
    </style>
    <title> QGIS</title>
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top p-0">
        <img src="images/logo.jpg" alt="">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <% const contents = {Home : "/" , "Tracking" : "qgisPage", "Crop Prediction" : "CropPrediction" , "Precision Agriculture" : "PrecisionAgriculture", "Weather" : "Weather" , "Smart Farming" : "SmartFarming" , "Plant Disease detection" : "diseaseDetection" ,   "About & Contact" : "abt"} %>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav d-flex mx-auto ">
                    <% for(item in contents){ %>
                        <div class="nav-item py-2 <% if ( 'qgisPage' ===contents[item]) { %> current <% } %>">
                            <li class="active mx-4">
                                <a class="nav-link" href=<%=contents[item] %>>
                                    <%=item %> <span class="sr-only">(current)</span></a>
                            </li>
                        </div>
                        <%} %>
                </ul>
            </div>
    </nav>
    <div id="map" class="m-auto">
    </div>
    <script src="js/qgis2web_expressions.js"></script>
    <script src="js/leaflet.js"></script>
    <script src="js/leaflet.rotatedMarker.js"></script>
    <script src="js/leaflet.pattern.js"></script>
    <script src="js/leaflet-hash.js"></script>
    <script src="js/Autolinker.min.js"></script>
    <script src="js/rbush.min.js"></script>
    <script src="js/labelgun.min.js"></script>
    <script src="js/labels.js"></script>
    <script src="js/crop_1.js"></script>
    <script>
        var highlightLayer;

        function highlightFeature(e) {
            highlightLayer = e.target;

            if (e.target.feature.geometry.type === 'LineString') {
                highlightLayer.setStyle({
                    color: '#ffff00',
                });
            } else {
                highlightLayer.setStyle({
                    fillColor: '#ffff00',
                    fillOpacity: 1
                });
            }
            highlightLayer.openPopup();
        }
        var map = L.map('map', {
            zoomControl: true,
            maxZoom: 28,
            minZoom: 1
        }).fitBounds([
            [7.08738097763595, 60.15353243770881],
            [34.06982937865789, 106.54280506698488]
        ]);
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
        var autolinker = new Autolinker({
            truncate: {
                length: 30,
                location: 'smart'
            }
        });
        var bounds_group = new L.featureGroup([]);

        function setBounds() {}
        map.createPane('pane_OpenStreetMap_0');
        map.getPane('pane_OpenStreetMap_0').style.zIndex = 400;
        var layer_OpenStreetMap_0 = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            pane: 'pane_OpenStreetMap_0',
            opacity: 1.0,
            attribution: '',
            minZoom: 1,
            maxZoom: 28,
            minNativeZoom: 0,
            maxNativeZoom: 19
        });
        layer_OpenStreetMap_0;
        map.addLayer(layer_OpenStreetMap_0);

        function pop_crop_1(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature) {
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <th scope="row">Sr_No</th>\
                        <td>' + (feature.properties['Sr_No'] !== null ? autolinker.link(feature.properties['Sr_No'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">State_</th>\
                        <td>' + (feature.properties['State_'] !== null ? autolinker.link(feature.properties['State_'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">District</th>\
                        <td>' + (feature.properties['District'] !== null ? autolinker.link(feature.properties['District'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">City</th>\
                        <td>' + (feature.properties['City'] !== null ? autolinker.link(feature.properties['City'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Latitude</th>\
                        <td>' + (feature.properties['Latitude'] !== null ? autolinker.link(feature.properties['Latitude'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Longitude</th>\
                        <td>' + (feature.properties['Longitude'] !== null ? autolinker.link(feature.properties['Longitude'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Crop_Year</th>\
                        <td>' + (feature.properties['Crop_Year'] !== null ? autolinker.link(feature.properties['Crop_Year'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Season</th>\
                        <td>' + (feature.properties['Season'] !== null ? autolinker.link(feature.properties['Season'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Crop</th>\
                        <td>' + (feature.properties['Crop'] !== null ? autolinker.link(feature.properties['Crop'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Area</th>\
                        <td>' + (feature.properties['Area'] !== null ? autolinker.link(feature.properties['Area'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Production</th>\
                        <td>' + (feature.properties['Production'] !== null ? autolinker.link(feature.properties['Production'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Avg Temperature (K)</th>\
                        <td>' + (feature.properties['Avg Temperature (K)'] !== null ? autolinker.link(feature.properties['Avg Temperature (K)'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Relative Humidity (%)</th>\
                        <td>' + (feature.properties['Relative Humidity (%)'] !== null ? autolinker.link(feature.properties['Relative Humidity (%)'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Avg Annual Rainfall (mm)</th>\
                        <td>' + (feature.properties['Avg Annual Rainfall (mm)'] !== null ? autolinker.link(feature.properties['Avg Annual Rainfall (mm)'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <th scope="row">Type of soil</th>\
                        <td>' + (feature.properties['Type of soil'] !== null ? autolinker.link(feature.properties['Type of soil'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {
                maxHeight: 400
            });
        }

        function style_crop_1_0() {
            return {
                pane: 'pane_crop_1',
                radius: 4.0,
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(74,189,59,1.0)',
                interactive: true,
            }
        }
        map.createPane('pane_crop_1');
        map.getPane('pane_crop_1').style.zIndex = 401;
        map.getPane('pane_crop_1').style['mix-blend-mode'] = 'normal';
        var layer_crop_1 = new L.geoJson(json_crop_1, {
            attribution: '',
            interactive: true,
            dataVar: 'json_crop_1',
            layerName: 'layer_crop_1',
            pane: 'pane_crop_1',
            onEachFeature: pop_crop_1,
            pointToLayer: function(feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_crop_1_0(feature));
            },
        });
        bounds_group.addLayer(layer_crop_1);
        map.addLayer(layer_crop_1);
        setBounds();
    </script>
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
</body>

</html>